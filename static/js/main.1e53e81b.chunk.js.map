{"version":3,"sources":["types/Filters.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Filters","TodoList","todos","onSelectTodo","selected","className","map","todo","id","title","completed","isSelected","classNames","type","onClick","filters","all","active","TodoFilter","filterBy","onChangeFilter","query","onQueryChange","value","onChange","event","target","filter","toUpperCase","slice","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onModalClose","useState","loading","setLoading","user","setUser","useEffect","userId","finally","href","email","name","App","setTodos","selectedTodo","setSelectedTodo","setFilterBy","setQuery","visibleTodos","filteredTodos","toLowerCase","includes","getPreparedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e53e81b.chunk.js","sourcesContent":["export const enum Filters {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  onSelectTodo: (todo: Todo) => void,\n  selected: Todo | null,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelectTodo,\n  selected,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const {\n          id,\n          title,\n          completed,\n        } = todo;\n\n        const isSelected = id === selected?.id;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': isSelected,\n            })}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onSelectTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames('far', {\n                      'fa-eye': !isSelected,\n                      'fa-eye-slash': isSelected,\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { Filters } from '../../types/Filters';\n\nconst filters: (keyof typeof Filters)[] = [\n  Filters.all,\n  Filters.active,\n  Filters.completed,\n];\n\ntype Props = {\n  filterBy: keyof typeof Filters,\n  onChangeFilter: (filter: keyof typeof Filters) => void,\n  query: string,\n  onQueryChange: (query: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  filterBy,\n  onChangeFilter,\n  query,\n  onQueryChange,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={filterBy}\n            data-cy=\"statusSelect\"\n            onChange={(event) => {\n              onChangeFilter(event.target.value as keyof typeof Filters);\n            }}\n          >\n            {filters.map(filter => (\n              <option value={filter} key={filter}>\n                {filter[0].toUpperCase() + filter.slice(1)}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          value={query}\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={(event) => onQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"Clear query\"\n              onClick={() => onQueryChange('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  onModalClose: (todo: Todo | null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  onModalClose,\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getUser(todo.userId)\n      .then(setUser)\n      .finally(() => setLoading(false));\n  }, [todo.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"Close modal\"\n              onClick={() => onModalClose(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={todo.completed\n                  ? 'has-text-success'\n                  : 'has-text-danger'}\n              >\n                {todo.completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Filters } from './types/Filters';\n\nconst getPreparedTodos = ({ todos, filterBy, query }: {\n  todos: Todo[],\n  filterBy: keyof typeof Filters,\n  query: string,\n}): Todo[] => {\n  const helpers = {\n    [Filters.all]: todos,\n    [Filters.active]: todos.filter(todo => !todo.completed),\n    [Filters.completed]: todos.filter(todo => todo.completed),\n  };\n\n  let filteredTodos = helpers[filterBy];\n\n  if (query) {\n    filteredTodos = filteredTodos\n      .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n  }\n\n  return filteredTodos;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [filterBy, setFilterBy] = useState<keyof typeof Filters>(Filters.all);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    setLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .finally(() => setLoading(false));\n  }, []);\n\n  const visibleTodos = getPreparedTodos({ todos, filterBy, query });\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterBy={filterBy}\n                onChangeFilter={setFilterBy}\n                query={query}\n                onQueryChange={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    onSelectTodo={setSelectedTodo}\n                    selected={selectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onModalClose={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}